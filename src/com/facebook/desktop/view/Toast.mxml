<?xml version="1.0" encoding="utf-8"?>
<s:Window
		xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		transparent="true" backgroundAlpha="0" styleName="toastWindow"
		width="{toastContent.width}" height="{toastContent.height}"
		systemChrome="none" showStatusBar="false" type="lightweight"
		alwaysInFront="true" resizable="false"
		maximizable="false" minimizable="false"
		rollOver="{closeShadow.visible=true}" rollOut="{closeShadow.visible=false}"
		click="clickHandler()" creationComplete="init()">
	
	<fx:Script>
		<![CDATA[
			import com.facebook.desktop.model.Model;
			
			import mx.events.EffectEvent;
			
			[Bindable] public var toastImage:String;
			[Bindable] public var toastTitle:String;
			[Bindable] public var toastMessage:String;
			[Bindable] public var toastLink:String;
			[Bindable] public var toastIsNotification:Boolean;
			
			private static const BOTTOM_MARGIN:int = 10; // No. of pixels between boxes
			private static const RIGHT_MARGIN:int = 10;  // Dist to right edge of screen
			private static const TOP_MARGIN:int = 5;    // Dist to top edge of screen
			private static const MAX_FADEIN_ALPHA:Number = 0.85;
			private static const MOVE_BY:int = 10;
			private static const LIFETIME_TICKS:int = 5;	// in seconds
			
			private static var visibleToasts:Array = new Array();

			private var model:Model = Model.instance;
			private var ticks:int;
			private var mouseOver:Boolean;
			
			
			private function init():void
			{
				ticks = LIFETIME_TICKS;
				
				addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
				addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
				
				var position:Point = findSpotForMessage(this.bounds, model.operatingSystem == "Mac");
				nativeWindow.x = Capabilities.screenResolutionX - width - RIGHT_MARGIN;
				nativeWindow.y = position.y;
				landingEffect.yTo = position.y;
				landingEffect.yFrom = (model.operatingSystem == "Mac") ? position.y - MOVE_BY : position.y + MOVE_BY;
				landingEffect.xFrom = landingEffect.xTo = position.x;
				
				visible = true;
				fadein.play();
				
				function mouseOverHandler():void
				{
					mouseOver = true;
				}
				
				function mouseOutHandler():void
				{
					mouseOver = false;
				}
			}
			
			public function tick():Boolean
			{
				if (!mouseOver)
				{
					ticks--;
					
					if (ticks == 0)
					{
						closeToast();
						return true;
					}
				}
					
				return false;
			}
			
			public function closeToast():void
			{
				fadeout.addEventListener(EffectEvent.EFFECT_END, finishClose);
				fadeout.play();
				
				function finishClose(event:Event):void
				{
					close();
				}
			}
			
			public function equals(toast:Toast):Boolean
			{
				return (this.toastImage == toast.toastImage && this.toastIsNotification == toast.toastIsNotification &&
					this.toastLink == toast.toastLink && this.toastMessage == toast.toastMessage && this.toastTitle == toast.toastTitle);
			}  // equals
			
			private function clickHandler():void
			{
				if (toastLink != null && !closeButton.visible)
				{
					flash.net.navigateToURL(new URLRequest(toastLink));
				}
			}
			
			private function findSpotForMessage(size:Rectangle, isMac:Boolean):Point{
				var spot:Point = new Point();
				var done:Boolean = false;
				var currentScreen:Screen;
				var screen:Screen = currentScreen = Screen.mainScreen;
				
				var x:int;
				var y:int;
				var testRect:Rectangle;
				
				for(x = screen.visibleBounds.x + screen.visibleBounds.width - size.width - TOP_MARGIN;
					x >= screen.visibleBounds.x; 
					x -= (size.width + TOP_MARGIN))
				{
					if (isMac)
					{
						for(y = screen.visibleBounds.y + TOP_MARGIN + TOP_MARGIN;
							y <= screen.visibleBounds.y + screen.visibleBounds.height - size.height - TOP_MARGIN;  
							y += 10)
						{
							testRect = new Rectangle(x, y - TOP_MARGIN, size.width + TOP_MARGIN, size.height + TOP_MARGIN);
							
							if(!isOccupied(testRect))
							{
								spot.x = x;
								spot.y = y;
								done = true;
								break;
							}  // if statement
						}  // for loop
					}  // if statement
					else
					{
						for(y = screen.visibleBounds.y + screen.visibleBounds.height - size.height - TOP_MARGIN;
							y >= screen.visibleBounds.y;  
							y -= 10)
						{
							testRect = new Rectangle(x, y, size.width + TOP_MARGIN, size.height + TOP_MARGIN);
							
							if(!isOccupied(testRect))
							{
								spot.x = x;
								spot.y = y;
								done = true;
								break;
							}  // if statement
						}  // for loop
					}  // else statement
					
					if (done)
					{
						break;
					}  // if statement
				}  // for loop
				
				return spot;
			}  // findSpotForMessage
			
			private function isOccupied(testRect:Rectangle):Boolean
			{
				var occupied:Boolean = false;
				for each (var window:NativeWindow in NativeApplication.nativeApplication.openedWindows)
				{
					occupied = occupied || (window.bounds.intersects(testRect) && window.visible && (window.title != "Facebook Desktop" || window.title != "Status Update Window"));
				}
				
				return occupied;
			}
			
			private function forceCloseToast(event:Event):void
			{
				event.preventDefault();
				
				visible=false;
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:Fade id="fadein"
				 target="{this}"
				 alphaFrom="0"
				 alphaTo="{MAX_FADEIN_ALPHA}"
				 duration="500"
				 effectStart="landingEffect.play()" />
		<mx:Fade id="fadeout"
				 target="{this}"
				 alphaFrom="{MAX_FADEIN_ALPHA}"
				 alphaTo="0"
				 duration="800"
				 effectEnd="close()" />
		<mx:Move id="landingEffect"
				 duration="250"
				 target="{this}" />
	</fx:Declarations>

	<mx:Canvas>
		<mx:HBox id="toastContent" cornerRadius="8" backgroundColor="black" backgroundAlpha="0.8" paddingTop="10" paddingBottom="10" paddingLeft="15" paddingRight="15" width="300">
			<mx:Image height="{(toastIsNotification) ? 16 : 50}" width="{(toastIsNotification) ? 16 : 50}" source="{toastImage}" />
			<mx:VBox>
				<s:RichText text="{toastTitle}" color="white" fontWeight="bold" width="210" />
				<s:RichText text="{toastMessage}" color="white" width="210" visible="{(toastIsNotification) ? false : true}" includeInLayout="{(toastIsNotification) ? false : true}" />
			</mx:VBox>
		</mx:HBox>
		<mx:Image id="closeShadow" source="/assets/images/toast/close.png" x="282" y="6" visible="false" rollOver="{closeButton.visible=true}" rollOut="{closeButton.visible=false}" />
		<mx:Image id="closeButton" source="/assets/images/toast/close_over.png" x="282" y="6" visible="false" rollOver="{closeButton.visible=true}" rollOut="{closeButton.visible=false}" click="forceCloseToast(event)" />
	</mx:Canvas>
	
</s:Window>
