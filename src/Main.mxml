<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	creationComplete="init()"
	visible="false">
	
	<fx:Script>
		<![CDATA[
			import air.net.URLMonitor;
			
			import com.charlesbihis.engine.notification.NotificationConst;
			import com.charlesbihis.engine.notification.NotificationManager;
			import com.facebook.desktop.FacebookDesktopConst;
			import com.facebook.desktop.control.api.GetAdditionalNotifications;
			import com.facebook.desktop.control.api.GetBirthdays;
			import com.facebook.desktop.control.api.GetNewsFeed;
			import com.facebook.desktop.control.api.GetNotifications;
			import com.facebook.desktop.control.event.FacebookDesktopEvent;
			import com.facebook.desktop.control.logging.Logging;
			import com.facebook.desktop.control.preferences.PreferencesManager;
			import com.facebook.desktop.control.system.SystemInteractionManager;
			import com.facebook.desktop.control.system.SystemState;
			import com.facebook.desktop.control.updates.UpdateManager;
			import com.facebook.desktop.control.util.Util;
			import com.facebook.desktop.model.Model;
			import com.facebook.desktop.view.window.MessageWindow;
			import com.facebook.graph.FacebookDesktop;
			
			import mx.logging.ILogger;
			import mx.logging.Log;
			import mx.utils.ObjectUtil;
			
			private static const POLL_DELAY:uint = 60000;		// poll every minute
			private static const TIME_TO_LOOK_BACK:int = 600;	// in seconds (i.e 10 minutes)
			
			private var model:Model = Model.instance;
			private var systemInteractionManager:SystemInteractionManager = SystemInteractionManager.instance;
			private var log:ILogger = Log.getLogger(className);
			private var pollTimer:Timer = new Timer(POLL_DELAY);
			
			private function init():void
			{
				// listen for important events
				model.addEventListener(FacebookDesktopEvent.USER_LOGGED_IN, userLoginHandler);
				model.addEventListener(FacebookDesktopEvent.USER_LOGGED_OUT, userLogoutHandler);
				
				// set up logging
				Logging.init();
				log.info("\n********* starting new session *********\n");
				log.info("Logging initialized");
				
				// grab preferences
				PreferencesManager.loadPreferences();
				
				// configure notification engine
				model.notificationManager = new NotificationManager(model.themes[model.preferences.theme].data, FacebookDesktopConst.DEFAULT_NOTIFICATION_IMAGE, FacebookDesktopConst.DEFAULT_COMPACT_NOTIFICATION_IMAGE, FacebookDesktopConst.DEFAULT_NOTIFICATION_SOUND, model.preferences.notificationDisplayLength, NotificationConst.DISPLAY_LOCATION_AUTO);
				
				// set up application to start on user-login
				log.info("Setting app to start on user-login: {0}", model.preferences.startAtLogin);
				NativeApplication.nativeApplication.startAtLogin = model.preferences.startAtLogin;
				
				// check online/offline status
				var urlRequest:URLRequest = new URLRequest(FacebookDesktopConst.FACEBOOK_HOMEPAGE);
				urlRequest.method = "HEAD";
				var urlMonitor:URLMonitor = new URLMonitor(urlRequest);
				urlMonitor.addEventListener(StatusEvent.STATUS, connectionMonitorHandler);
				urlMonitor.start();
				
				// determine OS
				var os:String = flash.system.Capabilities.os.substr(0, 3);
				if (os.indexOf("Win") >= 0)
				{
					model.operatingSystem = "Win";
				}  // if statement
				else if (os.indexOf("Mac") >= 0)
				{
					model.operatingSystem = "Mac";
					
					// Unfortunately, Hindi characters don't render correctly using
					// the Spark component namespace on Mac, so instead of removing
					// support for it entirely, let's just remove support for it on
					// OS X :S  Not sure if this will go over well, but until I can 
					// find a solution that allows text-wrapping and displays
					// characters as expected in all languages, then let's go with
					// this.
					model.locales.pop();
				}  // else-if statement
				else
				{
					model.operatingSystem = "Linux";
				}  // else statement
				log.info("OS set to {0}", model.operatingSystem);
				
				// check for updates
				log.info("Checking for updates");
				UpdateManager.checkForUpdates();
				
				// initialize our Facebook session
				FacebookDesktop.init(Model.APPLICATION_ID, loginHandler);
				
				var triedLogin:Boolean = false;
				function loginHandler(session:Object, fail:Object):void
				{
					// if we have a session, restore it
					if (session != null)
					{
						model.currentUser = session.user;
						model.dispatchEvent(new FacebookDesktopEvent(FacebookDesktopEvent.USER_LOGGED_IN));
					}  // if statement
					else if (!triedLogin)
					{
						FacebookDesktop.login(loginHandler, Model.REQUIRED_PERMISSIONS);
						triedLogin = true;
					}  // else-if statement
					else if (fail != null)
					{
						log.error("Error logging in.  Error object: " + ObjectUtil.toString(fail));
						
						var messageWindow:MessageWindow = new MessageWindow();
						messageWindow.windowTitle = "Login Error";
						if (fail is IOErrorEvent)
						{
							messageWindow.windowMessage = "Error #" + (fail as IOErrorEvent).errorID + ": Please check your network connection.";
							messageWindow.showOkayButton = true;
						}  // if statement
						else if (fail.error != null && fail.error.type != null && fail.error.message != null)
						{
							messageWindow.windowMessage = fail.error.type + ": " + fail.error.message;
							messageWindow.showOkayButton = true;
						}  // else-if statement
						else
						{
							messageWindow.windowMessage = "Sorry, an unknown error occurred while trying to log you in.  Please try again later.";
							messageWindow.showOkayButton = true;
						}  // else stateement
						messageWindow.open();
					}  // else-if statement
				}  // loginHandler
				
				function connectionMonitorHandler(event:Event):void
				{
					model.connected = urlMonitor.available;
					
					if (!urlMonitor.available)
					{
						systemInteractionManager.changeApplicationState(SystemState.DISCONNECTED);
					}  // if statement
					else
					{
						if (model.currentUser != null)
						{
							systemInteractionManager.changeApplicationState(SystemState.ONLINE);
							
							var now:Number = Math.floor((new Date().time) / 1000);
							if (now - parseInt(model.latestNewsFeedUpdate) > TIME_TO_LOOK_BACK)
							{
								log.info("Setting latest news feed update time to " + (now - TIME_TO_LOOK_BACK));
								model.latestNewsFeedUpdate = (now - TIME_TO_LOOK_BACK) + "";
							}  // if statement
							else
							{
								log.info("Been offline for {0} minutes.  Not resetting latestNewsFeedUpdate time", Math.floor((now - parseInt(model.latestNewsFeedUpdate)) / 60));
							}  // else statement
						}  // if statement
						else
						{
							systemInteractionManager.changeApplicationState(SystemState.OFFLINE);
						}  // else statement
					}  // else statement
				}  // connectionMonitorHandler
			}  // init
			
			private function userLoginHandler(event:FacebookDesktopEvent):void
			{
				log.info("Connected and all permissions granted! We are fully authorized!");
				
				// adjust icon and menus
				systemInteractionManager.changeApplicationState(SystemState.ONLINE);
				
				// show login popup
				model.notificationManager.show(resourceManager.getString("resources", "toast.welcome"), null, FacebookDesktop.getImageUrl(model.currentUser.id), FacebookDesktopConst.FACEBOOK_DESKTOP_PAGE);
				model.notificationManager.clearLatestFiveUpdates();
				
				// get latest update so that we can start receiving pop-ups for *new* updates
				FacebookDesktop.api("/me/home", getNewsFeedHandler, {limit:1});
				
				function getNewsFeedHandler(result:Object, fail:Object):void
				{
					if (fail == null && result != null && result is Array && (result as Array).length > 0)
					{
						// set latest-story-update time
						var latestNewsFeedUpdate:Date = Util.RFC3339toDate(result[0].created_time);
						log.info("Setting latest news feed update time to " + (latestNewsFeedUpdate.time / 1000));
						model.latestNewsFeedUpdate = (latestNewsFeedUpdate.time / 1000).toString();
						
						startTheShow();
					}  // if statement
					else
					{
						log.error("Request to get latest update has failed!  Error object: " + fail);
					}  // else statement
				}  // getNewsFeedHandler
			}  // userLoginHandler
			
			private function userLogoutHandler(event:FacebookDesktopEvent):void
			{
				// say goodbye!
				log.info("Logging out! Goodbye!");
				model.notificationManager.show(resourceManager.getString("resources", "toast.goodbye"), null, FacebookDesktopConst.DEFAULT_NOTIFICATION_IMAGE, null, false, false, false);
				
				// stop the poller
				pollTimer.removeEventListener(TimerEvent.TIMER, poll);
				pollTimer.stop();
				
				// change the application state to OFFLINE
				systemInteractionManager.changeApplicationState(SystemState.OFFLINE);
				
				// clear state information
				model.notificationManager.clearLatestFiveUpdates();
				model.currentUser = null;
				
				// invalidate the session
				FacebookDesktop.logout();
			}  // userLogoutHandler
			
			private function startTheShow():void
			{
				log.info("Initialization and connection complete!");
				
				// check for start-up notifications (birthdays, likes, comments, group posts, messages, pokes, shares, friend-requests, group-invites, event-invites)
				log.info("Fetching start-up notifications");
				
				// birthdays
				var getBirthdays:GetBirthdays = new GetBirthdays();
				getBirthdays.execute(null, null, {source:FacebookDesktopConst.STARTUP});
				
				// likes, comments, and group posts
				var getNotificationsCommand:GetNotifications = new GetNotifications();
				getNotificationsCommand.execute();
				
				// messages, pokes, shares, friend-requests, group-invites, and event-invites
				var getAdditionalNotificationsCommand:GetAdditionalNotifications = new GetAdditionalNotifications();
				getAdditionalNotificationsCommand.execute(null, null, {source:FacebookDesktopConst.STARTUP});
				
				// finally, start the poller
				log.info("Starting the poller");
				pollTimer.addEventListener(TimerEvent.TIMER, poll);
				pollTimer.start();
			}  // startTheShow
			
			private function poll(event:TimerEvent = null):void
			{
				if (model.connected && model.currentUser != null && !model.paused)
				{
					log.info("Polling!");
					
					// check for news feed updates
					var getNewsFeedCommand:GetNewsFeed = new GetNewsFeed();
					getNewsFeedCommand.execute({since:model.latestNewsFeedUpdate});
					
					// check for birthdays (don't worry, the command only runs once a day, even if we execute it multiple times)
					var getBirthdays:GetBirthdays = new GetBirthdays();
					getBirthdays.execute();
					
					// check for new likes, comments, and group posts
					var getNotificationsCommand:GetNotifications = new GetNotifications();
					if (model.latestNotificationUpdate != null)
					{
						getNotificationsCommand.execute({since:model.latestNotificationUpdate});
					}  // if statement
					else
					{
						getNotificationsCommand.execute();
					}  // else statement
					
					// check for new messages, pokes, shares, friend-requests, group-invites, and event-invites
					var getAdditionalNotificationsCommand:GetAdditionalNotifications = new GetAdditionalNotifications();
					getAdditionalNotificationsCommand.execute();
				}  // if statement
			}  // poll
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata>
	
	<fx:Style source="/com/facebook/desktop/view/style/style.css" />
	
</s:WindowedApplication>
